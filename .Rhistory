knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(simmer)
library(simmer.plot)
library(gridExtra)
set.seed(2024)
env<- simmer("New call centre")
customer <- trajectory("Customer") %>%
seize("CSR-Employee", 1) %>%
timeout(function() rexp(n=1, rate=1/3))  %>%
release("CSR-Employee", 1)
env%>%
add_resource("CSR-Employee", 2) %>%
add_generator("Customer", customer,function() rpois(n=1 , lambda = 1))
env %>%
run(until=1440)
p1 <- plot(get_mon_resources(env),
metric = "usage",
items ="server",step = T)
p2 <- plot(get_mon_arrivals(env), metric = "waiting_time")
grid.arrange(p1,p2,ncol=2)
set.seed(2024)
env<- simmer("New call centre")
customer <- trajectory("Customer") %>%
seize("CSR-Employee", 1) %>%
timeout(function() rexp(n=1, rate=1/3))  %>%
release("CSR-Employee", 1)
env%>%
add_resource("CSR-Employee", 5) %>%
add_generator("Customer", customer,function() rpois(n=1 , lambda = 1))
env %>%
run(until=1440)
p1 <- plot(get_mon_resources(env),
metric = "usage",
items ="server",step = T)
p2 <- plot(get_mon_arrivals(env), metric = "waiting_time")
grid.arrange(p1,p2,ncol=2)
plot(get_mon_resources(env), matric="utilization")
plot(get_mon_arrivals(env), matric="utilization")
plot(get_mon_resources(env), matric="usage", item="server")
set.seed(2024)
env<- simmer("New call centre")
customer <- trajectory("Customer") %>%
seize("CSR-Employee", 1) %>%
timeout(function() rexp(n=1, rate=1/3))  %>%
release("CSR-Employee", 1)
env%>%
add_resource("CSR-Employee", 2) %>%
add_generator("Customer", customer,function() rpois(n=1 , lambda = 1))
env %>%
run(until=1440)
p1 <- plot(get_mon_resources(env),
metric = "usage",
items ="server",step = T)
p2 <- plot(get_mon_arrivals(env), metric = "waiting_time")
grid.arrange(p1,p2,ncol=2)
set.seed(2024)
env<- simmer("New call centre")
customer <- trajectory("Customer") %>%
seize("CSR-Employee", 1) %>%
timeout(function() rexp(n=1, rate=1/3))  %>%
release("CSR-Employee", 1)
env%>%
add_resource("CSR-Employee", 5) %>%
add_generator("Customer", customer,function() rpois(n=1 , lambda = 1))
env %>%
run(until=1440)
p1 <- plot(get_mon_resources(env),
metric = "usage",
items ="server",step = T)
p2 <- plot(get_mon_arrivals(env), metric = "waiting_time")
grid.arrange(p1,p2,ncol=2)
plot(get_mon_resources(env), matric="utilization")
plot(get_mon_arrivals(env), matric="utilization")
plot(get_mon_resources(env), matric="usage", item="server")
set.seed(2024)
env<- simmer("New call centre")
customer <- trajectory("Customer") %>%
seize("CSR-Employee", 1) %>%
timeout(function() rexp(n=1, rate=1/3))  %>%
release("CSR-Employee", 1)
env%>%
add_resource("CSR-Employee", 3) %>%
add_generator("Customer", customer,function() rpois(n=1 , lambda = 1))
env %>%
run(until=1440)
p1 <- plot(get_mon_resources(env),
metric = "usage",
items ="server",step = T)
p2 <- plot(get_mon_arrivals(env), metric = "waiting_time")
grid.arrange(p1,p2,ncol=2)
p1 <- plot(get_mon_resources(env),
metric = "usage",
items ="server",step = T)
p2 <- plot(get_mon_arrivals(env), metric = "waiting_time")
grid.arrange(p1,p2,ncol=2)
p1 <- plot(get_mon_resources(env),
metric = "usage",
items ="server",step = T)
p2 <- plot(get_mon_arrivals(env), metric = "waiting_time")
grid.arrange(p1,p2,ncol=10)
p1 <- plot(get_mon_resources(env),
metric = "usage",
items ="server",step = T)
p2 <- plot(get_mon_arrivals(env), metric = "waiting_time")
grid.arrange(p1,p2,ncol=0.5)
p1 <- plot(get_mon_resources(env),
metric = "usage",
items ="server",step = T)
p2 <- plot(get_mon_arrivals(env), metric = "waiting_time")
grid.arrange(p1,p2,ncol=1)
set.seed(2024)
env<- simmer("New call centre")
customer <- trajectory("Customer") %>%
seize("CSR-Employee", 1) %>%
timeout(function() rexp(n=1, rate=1/3))  %>%
release("CSR-Employee", 1)
env%>%
add_resource("CSR-Employee", 2) %>%
add_generator("Customer", customer,function() rpois(n=1 , lambda = 1))
env %>%
run(until=1440)
p1 <- plot(get_mon_resources(env),
metric = "usage",
items ="server",step = T)
p2 <- plot(get_mon_arrivals(env), metric = "waiting_time")
grid.arrange(p1,p2,ncol=1)
set.seed(2024)
env<- simmer("New call centre")
customer <- trajectory("Customer") %>%
seize("CSR-Employee", 1) %>%
timeout(function() rexp(n=1, rate=1/3))  %>%
release("CSR-Employee", 1)
env%>%
add_resource("CSR-Employee", 5) %>%
add_generator("Customer", customer,function() rpois(n=1 , lambda = 1))
env %>%
run(until=1440)
p1 <- plot(get_mon_resources(env),
metric = "usage",
items ="server",step = T)
p2 <- plot(get_mon_arrivals(env), metric = "waiting_time")
grid.arrange(p1,p2,ncol=1)
set.seed(2024)
env<- simmer("New call centre")
customer <- trajectory("Customer") %>%
seize("CSR-Employee", 1) %>%
timeout(function() rexp(n=1, rate=1/3))  %>%
release("CSR-Employee", 1)
env%>%
add_resource("CSR-Employee", 6) %>%
add_generator("Customer", customer,function() rpois(n=1 , lambda = 1))
env %>%
run(until=1440)
p1 <- plot(get_mon_resources(env),
metric = "usage",
items ="server",step = T)
p2 <- plot(get_mon_arrivals(env), metric = "waiting_time")
grid.arrange(p1,p2,ncol=1)
set.seed(2024)
env<- simmer("New call centre")
customer <- trajectory("Customer") %>%
seize("CSR-Employee", 1) %>%
timeout(function() rexp(n=1, rate=1/3))  %>%
release("CSR-Employee", 1)
env%>%
add_resource("CSR-Employee", 4) %>%
add_generator("Customer", customer,function() rpois(n=1 , lambda = 1))
env %>%
run(until=1440)
p1 <- plot(get_mon_resources(env),
metric = "usage",
items ="server",step = T)
p2 <- plot(get_mon_arrivals(env), metric = "waiting_time")
grid.arrange(p1,p2,ncol=1)
set.seed(2024)
env<- simmer("New call centre")
customer <- trajectory("Customer") %>%
seize("CSR-Employee", 1) %>%
timeout(function() rexp(n=1, rate=1/3))  %>%
release("CSR-Employee", 1)
env%>%
add_resource("CSR-Employee", 5) %>%
add_generator("Customer", customer,function() rpois(n=1 , lambda = 1))
env %>%
run(until=1440)
p1 <- plot(get_mon_resources(env),
metric = "usage",
items ="server",step = T)
p2 <- plot(get_mon_arrivals(env), metric = "waiting_time")
grid.arrange(p1,p2,ncol=1)
set.seed(2024)
env<- simmer("New call centre")
customer <- trajectory("Customer") %>%
seize("CSR-Employee", 1) %>%
timeout(function() rexp(n=1, rate=1/3))  %>%
release("CSR-Employee", 1)
env%>%
add_resource("CSR-Employee", 6) %>%
add_generator("Customer", customer,function() rpois(n=1 , lambda = 1))
env %>%
run(until=1440)
p1 <- plot(get_mon_resources(env),
metric = "usage",
items ="server",step = T)
p2 <- plot(get_mon_arrivals(env), metric = "waiting_time")
grid.arrange(p1,p2,ncol=1)
plot(get_mon_resources(env), matric="utilization")
plot(get_mon_arrivals(env), matric="utilization")
plot(get_mon_resources(env), matric="usage", item="server")
# Set the reproducibility
set.seed(123)
n <- 7000
voltage <- rnorm(n, mean = 12, sd= 2)
resistence <- rnorm(n, mean = 8, sd =1)
# calculate power dissipated (p)
power <- voltage^2 / resistence
plot(voltage, power, xlab="Voltage(V)", ylab="Power(W)",
main = "Relationship between power and voltage", col = "green", pch = 16)
# Add a regression line to plot
abline (lm(power ~ voltage),col="red")
power_mean <- mean(power)
power_varience <- var(power)
cat("Approximate power mean: ",power_mean, "W\n")
cat("Approximate power varience: ",power_varience,"W^2\n")
prob <- mean(power>20)
cat("Probability that power is grater than 20W: ", prob)
library(ggplot2)
simulate_sample_means <- function(N, n) {
# a) Generate N samples of size n from a Uniform[-5,5] distribution
samples <- matrix(runif(N * n, min=-5, max=5), nrow=N)
# b) Calculate the sample means
sample_means <- rowMeans(samples)
# c) Plot a histogram of the sample means
hist(sample_means, breaks=30, main=paste("Histogram of Sample Means (n=", n, ")"),
xlab="Sample Mean", ylab="Frequency", xlim=c(-5,5))
# Return the sample means vector
return(sample_means)
}
par(mfrow=c(2,2))
for (sample_size in c(10, 15, 30, 50)) {
simulate_sample_means(N=500, n=sample_size)
}
samples <- matrix(runif(500 * 50, min=-5, max=5), nrow=500)
# b) Calculate the sample means
sample_means <- rowMeans(samples)
# c) Plot a histogram of the sample means
hist(sample_means, breaks=30, main=paste("Histogram of Sample Means (n=", 50, ")"),
xlab="Sample Mean", ylab="Frequency", xlim=c(-5,5))
set.seed(39)
n <- 100
numRealizations <- 5 # Number of realizations
random_walks <- matrix(nrow = numRealizations, ncol = n)
for (i in 1:numRealizations) {
X <- sample(c(-1, 1), n, replace = TRUE, prob = c(0.5, 0.5))
S <- cumsum(X)
plot(S, type = "l", main = paste("Realization",i))
random_walks[i, ] <- c(0, head(S, -1))
}
matplot(t(random_walks), type = 'l', lty = 1,
xlab = "Step count", ylab = "Random Walk Value positions",
main = "Five Realizations of the Random Walk")
legend("topright", legend = paste("Realization", 1:numRealizations),
col = 1:numRealizations, lty = 1)
